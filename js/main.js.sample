// ===========================================================================
// ================== MQTT: Connect Function =================================
//============================================================================
var reconnectTimeout = 2000;
var connected_flag = 0;

function MQTTconnect() {
  var clean_sessions=true;
  console.log("clean= "+clean_sessions);

  var MQTTbroker = '<MQTT_BROKER_HOSTNAME>';
  var MQTTport = <Websockets PORT>;


  if (MQTTport!="") {
    port=parseInt(MQTTport);
  }

  if (MQTTbroker!="") {
    host=MQTTbroker;
  }

  console.log("connecting to "+ host +" "+ port +" clean session="+clean_sessions);
  // console.log("user "+user_name);
  mqtt = new Paho.MQTT.Client(host,port,"web_" + parseInt(Math.random() * 100, 10));

  //MQTT connecton options including the mqtt broker subscriptions
  var options = {
    timeout: 3,
    cleanSession: clean_sessions,
    onSuccess: onConnect,
    onFailure: onFailure,
  };

  mqtt.onConnectionLost = onConnectionLost;
  mqtt.onMessageArrived = onMessageArrived;
  mqtt.onConnected = onConnected;

  mqtt.connect(options);

  return false
}

// ===========================================================================
// ============= MQTT: Callback Functions ====================================
//============================================================================
//can be used to reconnect on connection lost
function onConnectionLost(responseObject) {
  console.log("connection lost: " + responseObject.errorMessage);
  document.getElementById("status").innerHTML = "Connection Lost";
  document.getElementById("status_messages").innerHTML ="Connection Lost";
  connected_flag=0;
  MQTTconnect();
};

function onFailure(message) {
  console.log("Failed");
  document.getElementById("status_messages").innerHTML = "Connection Failed- Retrying";
  setTimeout(MQTTconnect, reconnectTimeout);
}

function onConnected(recon,url){
  console.log(" in onConnected " +reconn);
}

function onConnect() {
  document.getElementById("status_messages").innerHTML ="Connected to "+host +"on port "+port;
  connected_flag=1;
  document.getElementById("status").innerHTML = "Connected";
  console.log("on Connect "+connected_flag);
  sub_topics();
}

function disconnect()  {
  if (connected_flag==1)
    mqtt.disconnect();
}

function onMessageArrived(r_message) {
  // str = JSON.stringify(eval('('+message.payloadString+')'));
  // console.log('Mensaje recibido');
  // console.log(message);
  // console.log(dataTopics.indexOf(message.destinationName));

  out_msg="Message received: " + r_message.payloadString;
  out_msg=out_msg + "Topic: " + r_message.destinationName + "<br/>";
  out_msg="<b>" + out_msg + "</b>";

  data = JSON.parse(r_message.payloadString);
  console.log(data);
  console.log(data['object']);

  // Device Name:
  var devname = data['deviceName'];
  var latval = data['object']['Latitude'];
  var lonval = data['object']['Longitude'];
  var battval = data['object']['Battery'];

  // Current timestamp:
  var ts = moment().format('MMMM Do YYYY, h:mm:ss a');

  // Row to be added to the table:
  var datarow = '<tr id="' + devname + '"><td class="val">' + devname + '</td><td class="val">' + latval + '</td><td class="val">' + lonval + '</td><td class="val">' + battval + '</td><td class="val">' + ts + '</td></tr>';

  // Check if already exists a row of any of the "Device Names":
  if ($("#" + devname + "").length == 0) {
    $('#loradata tr:last').after(datarow);
  } else {
    $('#' + devname + "").replaceWith(datarow);
  }
  var markerinfo = devname + '<br /><b>Latitude: </b>' + latval + '<br /><b>Longitude: </b>' + lonval + '<br /><b>Battery: </b>' + battval;
  addMarker(latval,lonval,markerinfo); //add marker based on lattitude and longittude, using timestamp for description for now
  center = bounds.getCenter(); //center on marker, zooms in to far atm, needs to be fixed!
  map.fitBounds(bounds);
}

function sub_topics() {
  if (connected_flag==0){
    out_msg="<b>Not Connected so can't subscribe</b>"
    console.log(out_msg);
    document.getElementById("status_messages").innerHTML = out_msg;
    return false;
  }

  var MQTTsubTopic = 'application/6/node/#';
  var sqos=2;

  console.log("Subscribing to topic: " + MQTTsubTopic + " QOS " + sqos);

  document.getElementById("status_messages").innerHTML = "| Subscribing to topic: "+ MQTTsubTopic;

  var soptions={
    qos:sqos,
  };
  mqtt.subscribe(MQTTsubTopic,soptions);
  return false;
}

// ===========================================================================
// ===================== Google Maps API =====================================
//============================================================================
var center = null;
var map = null;
var bounds = new google.maps.LatLngBounds();

function addMarker(lat, lng, info) {
	// console.log(lat, lng, info);
	var pt = new google.maps.LatLng(lat, lng);
  bounds.extend(pt);
	var marker = new google.maps.Marker({
		position: pt,
		map: map
	});
};

function initMap() {
  var home = {lat: 0, lng: 0};
  console.log(nextel);
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 17,
    center: home
  });

  center = bounds.getCenter();
  map.fitBounds(bounds);

  // Connect to MQTT broker
  MQTTconnect();
};

// ============================================================================
// ======================== MAIN FUNCTION =====================================
// ============================================================================

// $(document).ready(function() {
//   initMap();
// });
